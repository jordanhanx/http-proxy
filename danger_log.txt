----------------------------
Robust to External Failures:
----------------------------
If client send a malformed request to the proxy, our application will send back a 400 error message back to client.
Also, if server send a corrupted resposne, the application will also send a 502 error message to inform client.

----------------------------
Cache Policy:
----------------------------
When our application acts like server to receive request from client:
1. If proxy receive a GET request, it will first look at cache to see if it has been cached
  a. if found, move to step 2
  b. if not found, connect to server and get response from actual server
2. While found in the cache, check if this response need re-validate 
  a. if don't need revalidate, send the http resposne to client
  b. if need, send the revalidation request to actual server

When our application acts like client to receive response from server:
1. If it's a 304 response, return the existing response in cache
2. If it's a 200 OK response, update/insert the cache and return it 

Cacheable Policy:
----------------------------
if the cache-control field in response contains private or no store,
or max_age, expired_time is equal to -1, this cache is not cacheable

if current time passed the expired time (since we use library to parse it, so it provide expired time for us)
then, this http response needs revalidate.

Update Policy:
----------------------------
If the this response is been cached, 

Insert Policy
----------------------------







----------------------------
Other Considerations:
----------------------------
Our application can handle get, post, and connect method. But it may raises concern when http redirection client to 
infected website or accessing malicious resource without their consent. And it may have some security issues



